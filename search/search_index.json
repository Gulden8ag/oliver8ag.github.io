{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"faqs/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"faqs/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"faqs/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"faqs/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"faqs/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"faqs/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"faqs/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"faqs/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"faqs/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"tutoriales_Laser/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"tutoriales_Laser/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"tutoriales_Laser/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"tutoriales_Laser/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"tutoriales_Laser/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"tutoriales_Laser/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"tutoriales_Laser/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"tutoriales_Laser/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"tutoriales_Laser/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"tutoriales_Router/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"tutoriales_Router/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"tutoriales_Router/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"tutoriales_Router/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"tutoriales_Router/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"tutoriales_Router/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"tutoriales_Router/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"tutoriales_Router/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"tutoriales_Router/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"tutoriales_cura/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"tutoriales_cura/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"tutoriales_cura/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"tutoriales_cura/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"tutoriales_cura/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"tutoriales_cura/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"tutoriales_cura/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"tutoriales_cura/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"tutoriales_cura/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"tutoriales_mods/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"tutoriales_mods/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"tutoriales_mods/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"tutoriales_mods/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"tutoriales_mods/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"tutoriales_mods/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"tutoriales_mods/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"tutoriales_mods/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"tutoriales_mods/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"tutoriales_monofab/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"tutoriales_monofab/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"tutoriales_monofab/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"tutoriales_monofab/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"tutoriales_monofab/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"tutoriales_monofab/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"tutoriales_monofab/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"tutoriales_monofab/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"tutoriales_monofab/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"tutoriales_print3d/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"tutoriales_print3d/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"tutoriales_print3d/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"tutoriales_print3d/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"tutoriales_print3d/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"tutoriales_print3d/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"tutoriales_print3d/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"tutoriales_print3d/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"tutoriales_print3d/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"tutoriales_pslicer/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"tutoriales_pslicer/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"tutoriales_pslicer/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"tutoriales_pslicer/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"tutoriales_pslicer/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"tutoriales_pslicer/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"tutoriales_pslicer/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"tutoriales_pslicer/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"tutoriales_pslicer/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"clases/fab-academy/tema1/","title":"Tema 1","text":"<p>Puedes incluir diagramas de bloques, esquemas de conexi\u00f3n o capturas de pantalla.</p>"},{"location":"clases/fab-academy/tema1/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>[Enlace a la p </li> </ul>"},{"location":"clases/fab-academy/tema1/#titulo-de-la-asignatura","title":"{{T\u00edtulo de la Asignatura}}","text":"<p>Prerrequisitos: Listar aqu\u00ed las materias, conocimientos o herramientas necesarias.</p> <p>Duraci\u00f3n: X semanas / Y horas.</p>"},{"location":"clases/fab-academy/tema1/#descripcion","title":"Descripci\u00f3n","text":"<p>Breve resumen de la asignatura, su enfoque y aplicaci\u00f3n pr\u00e1ctica.</p>"},{"location":"clases/fab-academy/tema1/#objetivos-de-aprendizaje","title":"Objetivos de Aprendizaje","text":"<ul> <li>Objetivo 1.</li> <li>Objetivo 2.</li> <li>Objetivo 3.</li> </ul>"},{"location":"clases/fab-academy/tema1/#contenido","title":"Contenido","text":"<ol> <li>Tema 1: Breve descripci\u00f3n de contenido.</li> <li>Tema 2: Breve descripci\u00f3n de contenido.</li> <li>Tema 3: Breve descripci\u00f3n de contenido.</li> </ol> <p>[!tip] Puedes adaptar esta lista conforme avances con los estudiantes.</p>"},{"location":"clases/fab-academy/tema1/#videos-tutoriales","title":"Videos Tutoriales","text":""},{"location":"clases/fab-academy/tema1/#video-1-introduccion-al-curso","title":"Video 1: Introducci\u00f3n al curso","text":""},{"location":"clases/fab-academy/tema1/#video-2-demo-practica-de-tema-x","title":"Video 2: Demo pr\u00e1ctica de [Tema X]","text":""},{"location":"clases/fab-academy/tema1/#ejemplos-de-codigo","title":"Ejemplos de C\u00f3digo","text":"<pre><code># Ejemplo en Python\nprint(\"\u00a1Hola, mundo de {{T\u00edtulo de la Asignatura}}!\")\n</code></pre> <pre><code>// Ejemplo en C++\n#include &lt;iostream&gt;\nint main() {\n    std::cout &lt;&lt; \"Ejemplo base\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>[!warning] Recuerda cambiar las rutas de importaci\u00f3n o librer\u00edas seg\u00fan tu entorno.</p>"},{"location":"clases/fab-academy/tema1/#imagenes-y-diagramas","title":"Im\u00e1genes y Diagramas","text":"<ul> <li>Documentaci\u00f3n oficial</li> <li>Repositorio GitHub</li> </ul>"},{"location":"clases/fab-academy/tema1/#notas-y-observaciones","title":"Notas y Observaciones","text":"<ul> <li>Anotar aqu\u00ed cualquier detalle importante o tarea.</li> <li>Fecha de \u00faltima actualizaci\u00f3n: <code>YYYY-MM-DD</code>.</li> </ul>"},{"location":"clases/introduccion-mecatronica/tema1/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"clases/introduccion-mecatronica/tema1/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"clases/introduccion-mecatronica/tema1/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"clases/introduccion-mecatronica/tema1/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"clases/introduccion-mecatronica/tema1/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"clases/introduccion-mecatronica/tema1/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"clases/introduccion-mecatronica/tema1/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"clases/introduccion-mecatronica/tema1/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"clases/introduccion-mecatronica/tema1/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"clases/produccion-electronica/tema1/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"clases/produccion-electronica/tema1/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"clases/produccion-electronica/tema1/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"clases/produccion-electronica/tema1/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"clases/produccion-electronica/tema1/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"clases/produccion-electronica/tema1/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"clases/produccion-electronica/tema1/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"clases/produccion-electronica/tema1/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"clases/produccion-electronica/tema1/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"clases/proyectos-ingenieria-1/tema1/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"clases/proyectos-ingenieria-1/tema1/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"clases/proyectos-ingenieria-1/tema1/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"clases/proyectos-ingenieria-1/tema1/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"clases/proyectos-ingenieria-1/tema1/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"clases/proyectos-ingenieria-1/tema1/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"clases/proyectos-ingenieria-1/tema1/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"clases/proyectos-ingenieria-1/tema1/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"clases/proyectos-ingenieria-1/tema1/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"clases/robotica-articulada/tema1/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"clases/robotica-articulada/tema1/#paso-1-crear-el-paquete-del-robot","title":"Paso 1: Crear el paquete del robot","text":"<pre><code>mkdir -p folder_proyecto\\src # Dentro de src donde se ubicar\u00e1n los paquetes ROS2\ncd folder_proyecto/src \nros2 pkg create --build-type ament_python mi_robot #Se crea un paquete de ROS2 mi_robot con soporte para Python.\n</code></pre>"},{"location":"clases/robotica-articulada/tema1/#paso-2-crear-carpetas-y-archivos-del-robot","title":"Paso 2: Crear carpetas y archivos del robot","text":"<p>Creamos tres carpetas que organizan los archivos clave del robot:</p> <p><code>launch/</code>: contiene los archivos .launch.py que permiten iniciar nodos y configurar el sistema de forma automatizada. Es \u00fatil para lanzar m\u00faltiples nodos al mismo tiempo con sus respectivos par\u00e1metros.</p> <p><code>urdf/</code>: almacena la descripci\u00f3n del robot. Usualmente se utiliza el formato .urdf o .xacro, que describe los enlaces (links), articulaciones (joints) y geometr\u00eda del robot.</p> <p><code>rviz/</code>: guarda configuraciones de visualizaci\u00f3n de RViz, como la posici\u00f3n de c\u00e1maras, marcos de referencia visibles, sensores activos, etc.</p> <pre><code>cd mi_robot\nmkdir launch urdf rviz\ntouch launch/display.launch.py urdf/robot.urdf.xacro rviz/display.rviz\n</code></pre>"},{"location":"clases/robotica-articulada/tema1/#paso-3-crear-el-urdf","title":"Paso 3 Crear el URDF","text":"<p><code>URDF</code> (Unified Robot Description Format) es un formato basado en XML que se utiliza en ROS para describir la estructura f\u00edsica y cinem\u00e1tica de un robot. Esto incluye sus partes (enlaces o links), c\u00f3mo est\u00e1n conectadas (articulaciones o joints), y detalles como masa, forma, color y l\u00edmites de movimiento.</p> <p>El URDF no define controladores ni comportamiento, sino la geometr\u00eda, estructura y relaciones cinem\u00e1ticas del robot. Es la base para su visualizaci\u00f3n y simulaci\u00f3n en herramientas como RViz y Gazebo.</p> <p><pre><code>&lt;!-- Estructura general del archivo URDF --&gt;\n&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"mi_robot\"&gt;\n\n  &lt;!-- Enlaces individuales del robot --&gt;\n  &lt;link name=\"...\"&gt; ... &lt;/link&gt;\n  &lt;link name=\"...\"&gt; ... &lt;/link&gt;\n  &lt;link name=\"...\"&gt; ... &lt;/link&gt;\n\n  &lt;!-- Articulaciones que unen los enlaces --&gt;\n  &lt;joint name=\"...\" type=\"...\"&gt; ... &lt;/joint&gt;\n  &lt;joint name=\"...\" type=\"...\"&gt; ... &lt;/joint&gt;\n  &lt;joint name=\"...\" type=\"...\"&gt; ... &lt;/joint&gt;\n\n&lt;/robot&gt;\n</code></pre> Cada <code>&lt;link&gt;</code> representa una parte f\u00edsica del robot (como una barra, un motor, una base). Cada <code>&lt;joint&gt;</code> representa una articulaci\u00f3n entre dos enlaces, con sus propiedades cinem\u00e1ticas y din\u00e1micas.</p>"},{"location":"clases/robotica-articulada/tema1/#propiedades-urdf","title":"Propiedades URDF","text":"<p><code>&lt;inertial&gt;</code>: propiedades f\u00edsicas Describe masa y momento de inercia del enlace. Es esencial para simulaciones f\u00edsicas realistas.</p> <ul> <li>origin: posiciona el centro de masa.</li> <li>mass: masa del objeto en kilogramos.</li> <li>inertia: matriz de inercia (en kg\u00b7m\u00b2), describe resistencia al cambio de rotaci\u00f3n.</li> </ul> <pre><code>  &lt;inertial&gt;\n     &lt;origin xyz=\"0 0 0.5\" rpy=\"0 0 0\"/&gt;\n     &lt;mass value=\"1\"/&gt;\n     &lt;inertia ixx=\"100\"  ixy=\"0\"  ixz=\"0\" iyy=\"100\" iyz=\"0\" izz=\"100\" /&gt;\n  &lt;/inertial&gt;\n</code></pre> <p><code>&lt;visual&gt;</code>:Se utiliza para mostrar el robot en RViz o Gazebo.(Simuladores y visualizadores)</p> <ul> <li><code>&lt;geometry&gt;</code>: puede ser una forma b\u00e1sica (box, sphere, cylinder) o un modelo .dae/.stl.</li> <li><code>&lt;material&gt;</code>: define el color y nombre del material. Se puede reutilizar entre enlaces.</li> </ul> <pre><code>  &lt;visual&gt;\n     &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\" /&gt;\n     &lt;geometry&gt;\n       &lt;cylinder radius=\"1\" length=\"0.5\"/&gt;\n     &lt;/geometry&gt;\n     &lt;material name=\"Cyan\"&gt;\n       &lt;color rgba=\"0 1.0 1.0 1.0\"/&gt;\n     &lt;/material&gt;\n   &lt;/visual&gt;\n</code></pre> <p><code>&lt;collision&gt;</code>:geometr\u00eda para colisiones Se utiliza para detectar colisiones en simulaci\u00f3n. Generalmente igual al visual, pero puede simplificarse para eficiencia.</p> <pre><code>  &lt;collision&gt;\n     &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n     &lt;geometry&gt;\n       &lt;cylinder radius=\"1\" length=\"0.5\"/&gt;\n     &lt;/geometry&gt;\n  &lt;/collision&gt;\n</code></pre>"},{"location":"clases/robotica-articulada/tema1/#propiedades-urdf_1","title":"Propiedades URDF  <p>Define c\u00f3mo se conectan dos enlaces y c\u00f3mo pueden moverse entre s\u00ed.</p> <pre><code>  &lt;joint name=\"my_joint\" type=\"floating\"&gt;\n      &lt;origin xyz=\"0 0 1\" rpy=\"0 0 3.1416\"/&gt;\n      &lt;parent link=\"link1\"/&gt;\n      &lt;child link=\"link2\"/&gt;\n\n      &lt;dynamics damping=\"0.0\" friction=\"0.0\"/&gt;\n      &lt;limit effort=\"30\" velocity=\"1.0\" lower=\"-2.2\" upper=\"0.7\" /&gt;\n      &lt;safety_controller k_velocity=\"10\" k_position=\"15\" soft_lower_limit=\"-2.0\" soft_upper_limit=\"0.5\" /&gt;\n\n  &lt;/joint&gt;\n</code></pre> <ul> <li><code>name</code>: nombre \u00fanico de la articulaci\u00f3n.</li> <li><code>type</code>: tipo de articulaci\u00f3n (fixed, revolute, prismatic, floating, continuous, planar).</li> <li><code>origin</code>: posici\u00f3n y orientaci\u00f3n relativa entre parent y child.</li> <li><code>parent / child</code>: nombres de los enlaces que se conectan.</li> </ul> <p>Atributos adicionales:</p> <ul> <li><code>limit</code>: restringe el movimiento angular o lineal (para revolute y prismatic).</li> <li><code>dynamics</code>: resistencia al movimiento (amortiguamiento y fricci\u00f3n).</li> <li><code>safety_controller</code>: define l\u00edmites suaves y seguridad para evitar da\u00f1os.</li> </ul>","text":""},{"location":"clases/robotica-articulada/tema1/#xacro","title":"XACRO <p>Xacro (XML Macro) es una extensi\u00f3n del formato URDF que permite usar macros, constantes y reutilizaci\u00f3n de c\u00f3digo. Es especialmente \u00fatil cuando un robot tiene componentes repetitivos o cuando se quieren definir par\u00e1metros reutilizables, como dimensiones o constantes f\u00edsicas (por ejemplo, \u03c0).</p>","text":""},{"location":"clases/robotica-articulada/tema1/#ejemplo-de-urdf","title":"Ejemplo de URDF <p>Plan de robot:</p> <p>Crearemos un robot que tiene 3 grados de libertad (3 DoF), con tres revolutas siguiendo la descripcion a continucacion.</p> <p><code>base_link</code> \u2192 <code>joint1</code> \u2192 <code>link1</code></p> <p><code>link1</code> \u2192 <code>joint2</code> \u2192 <code>link2</code></p> <p><code>link2</code> \u2192 <code>joint3</code> \u2192 <code>link3</code></p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!-- Declaraci\u00f3n de robot y espacio de nombres de Xacro --&gt;\n&lt;robot xmlns:xacro=\"http://ros.org/wiki/xacro\" name=\"simple_arm\"&gt;\n\n  &lt;!-- Definici\u00f3n de constante: pi --&gt;\n  &lt;xacro:property name=\"pi\" value=\"3.14159\"/&gt;\n\n  &lt;!-- Enlace base del robot, punto fijo desde donde parte toda la estructura --&gt;\n  &lt;link name=\"base_link\"/&gt;\n\n  &lt;!-- Articulaci\u00f3n 1: permite rotaci\u00f3n alrededor del eje Z --&gt;\n  &lt;joint name=\"joint1\" type=\"revolute\"&gt;\n    &lt;parent link=\"base_link\"/&gt;             &lt;!-- Enlace padre: base --&gt;\n    &lt;child link=\"link1\"/&gt;                 &lt;!-- Enlace hijo: primer segmento --&gt;\n    &lt;origin xyz=\"0 0 0.1\" rpy=\"0 0 0\"/&gt;   &lt;!-- Posici\u00f3n de la articulaci\u00f3n respecto al padre --&gt;\n    &lt;axis xyz=\"0 0 1\"/&gt;                   &lt;!-- Eje de rotaci\u00f3n: Z --&gt;\n    &lt;limit lower=\"-${pi}\" upper=\"${pi}\" effort=\"1\" velocity=\"1\"/&gt; &lt;!-- Rango de movimiento y l\u00edmites f\u00edsicos --&gt;\n  &lt;/joint&gt;\n\n  &lt;!-- Enlace 1: barra azul en forma de caja --&gt;\n  &lt;link name=\"link1\"&gt;\n    &lt;visual&gt;\n      &lt;geometry&gt;\n        &lt;box size=\"0.1 0.1 0.3\"/&gt;               &lt;!-- Tama\u00f1o de la caja: 10x10x30 cm --&gt;\n      &lt;/geometry&gt;\n      &lt;origin xyz=\"0 0 0.15\"/&gt;                 &lt;!-- Centrado respecto al eje Z del enlace --&gt;\n      &lt;material name=\"blue\"&gt;                  &lt;!-- Color azul --&gt;\n        &lt;color rgba=\"0 0 1 1\"/&gt;\n      &lt;/material&gt;\n    &lt;/visual&gt;\n  &lt;/link&gt;\n\n  &lt;!-- Articulaci\u00f3n 2: rotaci\u00f3n sobre eje Y (tipo codo) --&gt;\n  &lt;joint name=\"joint2\" type=\"revolute\"&gt;\n    &lt;parent link=\"link1\"/&gt;                   &lt;!-- Conecta el link1 --&gt;\n    &lt;child link=\"link2\"/&gt;                    &lt;!-- Con el siguiente enlace --&gt;\n    &lt;origin xyz=\"0 0 0.3\" rpy=\"0 0 0\"/&gt;       &lt;!-- Ubicaci\u00f3n al final del link1 --&gt;\n    &lt;axis xyz=\"0 1 0\"/&gt;                       &lt;!-- Eje de rotaci\u00f3n: Y --&gt;\n    &lt;limit lower=\"-${pi/2}\" upper=\"${pi/2}\" effort=\"1\" velocity=\"1\"/&gt; &lt;!-- Movimiento limitado a \u00b190\u00b0 --&gt;\n  &lt;/joint&gt;\n\n  &lt;!-- Enlace 2: cilindro verde que simula una parte del brazo --&gt;\n  &lt;link name=\"link2\"&gt;\n    &lt;visual&gt;\n      &lt;geometry&gt;\n        &lt;cylinder length=\"0.3\" radius=\"0.05\"/&gt; &lt;!-- Cilindro de 30 cm y radio 5 cm --&gt;\n      &lt;/geometry&gt;\n      &lt;origin xyz=\"0 0 0.15\"/&gt;                &lt;!-- Posicionado de forma centrada --&gt;\n      &lt;material name=\"green\"&gt;                &lt;!-- Color verde --&gt;\n        &lt;color rgba=\"0 1 0 1\"/&gt;\n      &lt;/material&gt;\n    &lt;/visual&gt;\n  &lt;/link&gt;\n\n  &lt;!-- Articulaci\u00f3n 3: rotaci\u00f3n sobre eje X --&gt;\n  &lt;joint name=\"joint3\" type=\"revolute\"&gt;\n    &lt;parent link=\"link2\"/&gt;                   &lt;!-- Conecta link2 --&gt;\n    &lt;child link=\"link3\"/&gt;                    &lt;!-- Con link3 --&gt;\n    &lt;origin xyz=\"0 0 0.3\" rpy=\"0 0 0\"/&gt;       &lt;!-- Al final de link2 --&gt;\n    &lt;axis xyz=\"1 0 0\"/&gt;                       &lt;!-- Eje de rotaci\u00f3n: X --&gt;\n    &lt;limit lower=\"-${pi}\" upper=\"${pi}\" effort=\"1\" velocity=\"1\"/&gt; &lt;!-- Rango completo de giro --&gt;\n  &lt;/joint&gt;\n\n  &lt;!-- Enlace 3: esfera roja al final del brazo --&gt;\n  &lt;link name=\"link3\"&gt;\n    &lt;visual&gt;\n      &lt;geometry&gt;\n        &lt;sphere radius=\"0.05\"/&gt;              &lt;!-- Esfera con radio de 5 cm --&gt;\n      &lt;/geometry&gt;\n      &lt;origin xyz=\"0 0 0.05\"/&gt;               &lt;!-- Posicionada centrada en eje Z --&gt;\n      &lt;material name=\"red\"&gt;                  &lt;!-- Color rojo --&gt;\n        &lt;color rgba=\"1 0 0 1\"/&gt;\n      &lt;/material&gt;\n    &lt;/visual&gt;\n  &lt;/link&gt;\n\n&lt;/robot&gt;\n</code></pre>","text":""},{"location":"clases/robotica-articulada/tema1/#paso-4-crear-un-launch","title":"Paso 4 Crear un launch","text":"<p>Los archivos launch permiten iniciar m\u00faltiples nodos de ROS 2 de manera organizada y autom\u00e1tica. En ROS2, un nodo es un proceso, una unidad de ejecuci\u00f3n, que realiza tareas espec\u00edficas dentro de un sistema rob\u00f3tico Son especialmente \u00fatiles cuando:</p> <ul> <li>Se requiere iniciar varios procesos (como RViz, controladores, sensores virtuales) al mismo tiempo.</li> <li>Se quiere configurar par\u00e1metros al vuelo.</li> <li>Se busca repetir una misma configuraci\u00f3n de prueba muchas veces sin escribir comandos manuales.</li> </ul> <p>Un <code>launch.py</code> t\u00edpico incluye:</p> <ul> <li>Importaciones necesarias (<code>launch</code>, <code>launch_ros</code>, etc.)</li> <li> <p>Ruta al modelo URDF/Xacro del robot.</p> </li> <li> <p>Nodos que deben lanzarse, como:</p> <ul> <li><code>robot_state_publisher</code>: publica la posici\u00f3n de cada articulaci\u00f3n del robot.</li> <li><code>joint_state_publisher_gui</code>: interfaz para manipular las articulaciones manualmente.</li> <li><code>rviz2</code>: visualizador 3D.</li> </ul> </li> </ul>"},{"location":"clases/robotica-articulada/tema1/#ejemplo","title":"Ejemplo <pre><code># Importa las clases necesarias para definir una descripci\u00f3n de lanzamiento y nodos ROS 2\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\n\n# Permite obtener la ruta al paquete desde el entorno de ROS\nfrom ament_index_python.packages import get_package_share_directory\n\n# Librer\u00edas est\u00e1ndar\nimport os\nimport xacro  # Para procesar archivos .xacro a URDF v\u00e1lido\n\ndef generate_launch_description():\n    # Construye la ruta completa al archivo Xacro dentro del paquete 'mi_robot'\n    urdf_file = os.path.join(\n        get_package_share_directory('mi_robot'),  # Encuentra la ruta compartida del paquete\n        'urdf',\n        'robot.urdf.xacro'                       # Nombre del archivo Xacro\n    )\n\n    # Procesa el archivo Xacro y lo convierte a XML (formato URDF v\u00e1lido)\n    robot_description_config = xacro.process_file(urdf_file).toxml()\n\n    # Define y devuelve la descripci\u00f3n de lanzamiento con los nodos necesarios\n    return LaunchDescription([\n\n        # Nodo 1: joint_state_publisher_gui\n        # Abre una interfaz gr\u00e1fica con sliders para mover las articulaciones del robot\n        Node(\n            package='joint_state_publisher_gui',\n            executable='joint_state_publisher_gui',\n            name='joint_state_publisher_gui',\n            output='screen'  # Muestra salida en la terminal\n        ),\n\n        # Nodo 2: robot_state_publisher\n        # Publica la transformaci\u00f3n entre enlaces usando la descripci\u00f3n URDF del robot\n        Node(\n            package='robot_state_publisher',\n            executable='robot_state_publisher',\n            name='robot_state_publisher',\n            output='screen',\n            parameters=[{'robot_description': robot_description_config}]\n            # Se pasa el URDF generado desde el Xacro como par\u00e1metro\n        ),\n\n        # Nodo 3: rviz2\n        # Abre RViz con una vista 3D para visualizar el modelo del robot\n        Node(\n            package='rviz2',\n            executable='rviz2',\n            name='rviz2',\n            output='screen'\n        )\n    ])\n</code></pre>","text":""},{"location":"clases/robotica-articulada/tema1/#paso-5-configurar-archivo-setup","title":"Paso 5 Configurar archivo setup","text":"<p>El archivo setup.py define c\u00f3mo se instala y organiza un paquete de ROS 2 basado en Python. ROS 2 usa setuptools (una herramienta est\u00e1ndar en Python) junto con el sistema de construcci\u00f3n ament para empaquetar, instalar y compartir proyectos.</p>"},{"location":"clases/robotica-articulada/tema1/#ejemplo_1","title":"Ejemplo <pre><code># Importa herramientas de instalaci\u00f3n de paquetes en Python\nfrom setuptools import setup\n\n# Librer\u00edas est\u00e1ndar para trabajar con archivos y rutas\nimport os\nfrom glob import glob  # Permite buscar m\u00faltiples archivos con comodines\n\n# Nombre del paquete (debe coincidir con la carpeta principal)\npackage_name = 'mi_robot'\n\n# Configuraci\u00f3n principal del paquete\nsetup(\n    name=package_name,        # Nombre del paquete\n    version='0.0.0',          # Versi\u00f3n inicial (puedes cambiarlo)\n    packages=[package_name],  # Subcarpeta con archivos Python (si los hubiera)\n\n    # Archivos que se deben instalar y compartir\n    data_files=[\n        ('share/' + package_name, ['package.xml']),  # Archivo de metadatos de ROS 2\n        (os.path.join('share', package_name, 'launch'), glob('launch/*.py')),  # Archivos .launch.py\n        (os.path.join('share', package_name, 'urdf'), glob('urdf/*.xacro')),   # Archivos URDF/Xacro\n        (os.path.join('share', package_name, 'rviz'), glob('rviz/*.rviz')),    # Configuraciones de RViz\n    ],\n\n    install_requires=['setuptools'],  # Dependencia para instalar\n    zip_safe=True,                    # Si es seguro comprimirlo como zip (generalmente s\u00ed)\n\n    maintainer='your_name',          # Cambiar por el nombre del autor o mantenedor\n    maintainer_email='your@email.com',  # Correo de contacto\n    description='Simple 3DOF articulated arm example',  # Breve descripci\u00f3n\n    license='MIT',                   # Tipo de licencia (MIT, BSD, GPL, etc.)\n\n    tests_require=['pytest'],       # Framework de pruebas si se usara\n    entry_points={\n        'console_scripts': [],      # Aqu\u00ed van los scripts Python ejecutables si los hubiera\n    },\n)\n</code></pre>","text":""},{"location":"clases/robotica-articulada/tema1/#paso-6-editar-packagexml","title":"Paso 6 Editar package.xml","text":"<p>El archivo package.xml es un archivo de metadatos obligatorio para todo paquete ROS 2. Define la informaci\u00f3n del paquete, como:</p> <ul> <li>Nombre y versi\u00f3n.</li> <li>Autor y licencia.</li> <li>Dependencias (tanto de compilaci\u00f3n como de ejecuci\u00f3n).</li> <li>Tipo de sistema de construcci\u00f3n (por ejemplo, ament_python).</li> </ul> <p>Es utilizado por herramientas como <code>colcon</code>, <code>rosdep</code> y <code>ros2 launch</code> para entender c\u00f3mo construir, instalar y ejecutar el paquete correctamente.</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\"\n            schematypens=\"http://www.w3.org/2001/XMLSchema\"?&gt;\n&lt;package format=\"3\"&gt; &lt;!-- Versi\u00f3n del formato del archivo de paquete --&gt;\n\n  &lt;name&gt;mi_robot&lt;/name&gt;        &lt;!-- Nombre del paquete (debe coincidir con la carpeta) --&gt;\n  &lt;version&gt;0.0.0&lt;/version&gt;     &lt;!-- Versi\u00f3n del paquete --&gt;\n  &lt;description&gt;TODO: Package description&lt;/description&gt; &lt;!-- Descripci\u00f3n (debe reemplazarse) --&gt;\n\n  &lt;!-- Informaci\u00f3n del mantenedor --&gt;\n  &lt;maintainer email=\"oliver@todo.todo\"&gt;oliver&lt;/maintainer&gt;\n\n  &lt;!-- Tipo de licencia (cambia TODO por MIT, BSD, GPL, etc.) --&gt;\n  &lt;license&gt;TODO: License declaration&lt;/license&gt;\n\n  &lt;!-- Dependencias necesarias para ejecutar pruebas (opcional en este caso) --&gt;\n  &lt;test_depend&gt;ament_copyright&lt;/test_depend&gt;\n  &lt;test_depend&gt;ament_flake8&lt;/test_depend&gt;\n  &lt;test_depend&gt;ament_pep257&lt;/test_depend&gt;\n  &lt;test_depend&gt;python3-pytest&lt;/test_depend&gt;\n\n  &lt;!-- Exportar el tipo de sistema de construcci\u00f3n --&gt;\n  &lt;export&gt;\n    &lt;build_type&gt;ament_python&lt;/build_type&gt; &lt;!-- Indica que se usa setuptools con Python --&gt;\n  &lt;/export&gt;\n\n  &lt;!-- Dependencias necesarias para ejecutar el paquete --&gt;\n  &lt;exec_depend&gt;joint_state_publisher_gui&lt;/exec_depend&gt; &lt;!-- GUI para mover articulaciones --&gt;\n  &lt;exec_depend&gt;robot_state_publisher&lt;/exec_depend&gt;     &lt;!-- Publica transformaciones del robot --&gt;\n  &lt;exec_depend&gt;rviz2&lt;/exec_depend&gt;                     &lt;!-- Visualizaci\u00f3n en 3D --&gt;\n\n  &lt;!-- Herramientas de construcci\u00f3n necesarias --&gt;\n  &lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt;     &lt;!-- Incluido por compatibilidad general --&gt;\n  &lt;buildtool_depend&gt;ament_python&lt;/buildtool_depend&gt;    &lt;!-- Necesario al usar setup.py --&gt;\n\n  &lt;!-- Dependencias de c\u00f3digo Python para localizar archivos del paquete --&gt;\n  &lt;build_depend&gt;ament_index_python&lt;/build_depend&gt;\n  &lt;exec_depend&gt;ament_index_python&lt;/exec_depend&gt;\n\n&lt;/package&gt;\n</code></pre>"},{"location":"clases/robotica-articulada/tema1/#paso-7-construir-el-paquete","title":"Paso 7 Construir el paquete","text":"<p>Una vez configurados correctamente los archivos <code>setup.py</code> y <code>package.xml</code>, el siguiente paso es compilar el paquete usando <code>colcon</code>, la herramienta de construcci\u00f3n recomendada en ROS 2.</p> <pre><code>cd ~/folder_proyecto\ncolcon build\nsource install/setup.bash\n</code></pre>"},{"location":"clases/robotica-articulada/tema1/#paso-8-correr-el-launch-de-nuestro-robot","title":"Paso 8 Correr el launch de nuestro robot","text":"<pre><code>ros2 launch mi_robot display.launch.py\n</code></pre>"},{"location":"clases/robotica-articulada/tema1/#paso-9-opcional-abrir-la-terminal-para-leer-los-datos-de-matriz","title":"Paso 9 Opcional abrir la terminal para leer los datos de matriz","text":"<pre><code>ros2 run tf2_ros tf2_echo base_link link3\n</code></pre>"},{"location":"clases/robotica-articulada/tema2/","title":"Tema 2","text":""},{"location":"clases/robotica-articulada/tema2/#instalar-robotic-toolbox-python","title":"Instalar Robotic Toolbox python","text":"<p>Primero revisamos python que este bien <pre><code>python3 --version\n</code></pre> Luego instalamos pip si no lo detecta por default</p> <p><pre><code>sudo apt update\nsudo apt install python3-pip\npip3 install --upgrade pip\n</code></pre> Instalar el toolbox</p> <pre><code>pip3 install roboticstoolbox-python spatialmath-python --break-system-packages\npip3 install matplotlib swift-sim --break-system-packages\n</code></pre> <p>Para probarlo</p> <pre><code>python3\n</code></pre> <pre><code>from roboticstoolbox import models\nrobot = models.DH.Puma560()\nprint(robot)\n</code></pre>"},{"location":"clases/robotica-articulada/tema3/","title":"Tema 3","text":""},{"location":"clases/robotica-articulada/tema3/#transmision-e-inercia","title":"Transmision e Inercia","text":""},{"location":"clases/robotica-articulada/tema3/#inercia","title":"Inercia","text":""},{"location":"clases/robotica-articulada/tema3/#bloque-de-transmision","title":"Bloque de transmision","text":"<pre><code>&lt;transmission name=\"trans_&lt;tu_junta&gt;\"&gt;\n  &lt;!-- A. Tipo de transmisi\u00f3n --&gt;\n  &lt;type&gt;transmission_interface/&lt;NombreTipo&gt;&lt;/type&gt;\n\n  &lt;!-- B. Secci\u00f3n de la junta URDF --&gt;\n  &lt;joint name=\"&lt;tu_junta&gt;\"&gt;\n    &lt;hardwareInterface&gt;&lt;NombreInterfaz&gt;&lt;/hardwareInterface&gt;\n  &lt;/joint&gt;\n\n  &lt;!-- C. Secci\u00f3n de actuador(es) --&gt;\n  &lt;!-- Para Simple y Reduction: un solo actuador --&gt;\n  &lt;actuator name=\"motor_&lt;tu_junta&gt;\"&gt;\n    &lt;hardwareInterface&gt;&lt;NombreInterfaz&gt;&lt;/hardwareInterface&gt;\n    &lt;mechanicalReduction&gt;1.0&lt;/mechanicalReduction&gt;\n  &lt;/actuator&gt;\n\n  &lt;!-- Para Differential/FourWheel: varios actuadores --&gt;\n  &lt;!--\n  &lt;actuator name=\"motor_izquierdo\"&gt;\n    ...\n  &lt;/actuator&gt;\n  &lt;actuator name=\"motor_derecho\"&gt;\n    ...\n  &lt;/actuator&gt;\n  --&gt;\n&lt;/transmission&gt;\n</code></pre> <ul> <li> <p><code>&lt;type&gt;</code> selecciona el comportamiento de mapeo</p> </li> <li> <p><code>&lt;joint&gt;</code> enlaza el nombre de la junta URDF con la interfaz de control</p> </li> <li> <p><code>&lt;actuator&gt;</code> define cada motor, su interfaz y la relaci\u00f3n de reducci\u00f3n mec\u00e1nica</p> </li> </ul>"},{"location":"clases/robotica-articulada/tema3/#interfaces-de-hardware","title":"Interfaces de Hardware","text":"<p>Cada secci\u00f3n  y  debe declarar una de las siguientes interfaces: <ul> <li>PositionJointInterface \u2192 comandos de posici\u00f3n (\u00e1ngulo)<ul> <li>Qu\u00e9 hace: Permite enviar un objetivo de posici\u00f3n (\u00e1ngulo) al controlador.</li> <li>Usarla en:<ul> <li>Articulaciones de robot donde quieres especificar directamente la posici\u00f3n final.</li> <li>Control de trayectoria</li> </ul> </li> </ul> </li> <li>VelocityJointInterface \u2192 comandos de velocidad<ul> <li>Qu\u00e9 hace: Permite enviar un objetivo de velocidad (rad/s o m/s).</li> <li>Usarla en:<ul> <li>Sistemas de transmisi\u00f3n diferencial como las ruedas en un robot m\u00f3vil.</li> </ul> </li> </ul> </li> <li>EffortJointInterface \u2192 comandos de esfuerzo/torque<ul> <li>Cuando el lazo de control se basa en torque.</li> <li>Usarla en:<ul> <li>Cuando el lazo de control se basa en torque (manipuladores con control de fuerza como pulido, atornillado, etc).</li> <li>Aplicaciones de interacci\u00f3n humano-robot.</li> </ul> </li> </ul> </li> </ul>"},{"location":"clases/robotica-articulada/tema3/#descripcion-general-de-los-tipos-de-transmision","title":"Descripci\u00f3n general de los tipos de transmisi\u00f3n","text":"Nombre del tipo Caso de uso <code>transmission_interface/SimpleTransmission</code> Mapeo uno a uno entre junta \u2194 motor <code>transmission_interface/DifferentialTransmission</code> Dos actuadores que mueven una junta (ej. robot diferencial) <code>transmission_interface/FourWheelDifferentialTransmission</code> Cuatro actuadores, dos diferenciales virtuales <code>transmission_interface/JointReductionTransmission</code> Junta con reducci\u00f3n mec\u00e1nica integrada <code>transmission_interface/ActuatorTransmission</code> S\u00f3lo actuador (sin junta URDF asociada)"},{"location":"clases/robotica-articulada/tema3/#ejemplos","title":"Ejemplos","text":"<p>Primero declaramos nuestro Joint</p> <pre><code>&lt;joint name=\"joint1_base\" type=\"revolute\"&gt;\n  &lt;parent link=\"base_link\"/&gt;\n  &lt;child  link=\"link1\"/&gt;\n  &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n  &lt;axis  xyz=\"0 0 1\"/&gt;\n  &lt;limit lower=\"-${pi}\" upper=\"${pi}\" effort=\"10\" velocity=\"1\"/&gt;\n&lt;/joint&gt;\n</code></pre>"},{"location":"clases/robotica-articulada/tema3/#transmision-simple","title":"Transmision Simple","text":"<p>Conducci\u00f3n directa, 1 junta \u2194 1 motor: <pre><code>&lt;transmission name=\"trans_joint1_base_simple\"&gt;\n  &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt;\n  &lt;joint name=\"joint1_base\"&gt;\n    &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;\n  &lt;/joint&gt;\n  &lt;actuator name=\"motor1_base\"&gt;\n    &lt;hardwareInterface&gt;PositionJointInterface&lt;/hardwareInterface&gt;\n    &lt;mechanicalReduction&gt;1.0&lt;/mechanicalReduction&gt;\n  &lt;/actuator&gt;\n&lt;/transmission&gt;\n</code></pre></p>"},{"location":"clases/robotica-articulada/tema3/#transmision-con-reduccion","title":"Transmision con reduccion","text":"<p>Si la junta ya incluye una caja de engranajes interna <pre><code>&lt;transmission name=\"trans_joint1_base_reduction\"&gt;\n  &lt;type&gt;transmission_interface/JointReductionTransmission&lt;/type&gt;\n  &lt;joint name=\"joint1_base\"&gt;\n    &lt;hardwareInterface&gt;EffortJointInterface&lt;/hardwareInterface&gt;\n    &lt;!-- reducci\u00f3n mec\u00e1nica integrada en la junta --&gt;\n    &lt;mechanicalReduction&gt;5.0&lt;/mechanicalReduction&gt;\n  &lt;/joint&gt;\n  &lt;actuator name=\"unused\"&gt;\n    &lt;!-- opcional en este tipo --&gt;\n    &lt;hardwareInterface&gt;EffortJointInterface&lt;/hardwareInterface&gt;\n  &lt;/actuator&gt;\n&lt;/transmission&gt;\n</code></pre></p>"},{"location":"clases/robotica-articulada/tema3/#transmision-diferencial","title":"Transmision Diferencial","text":"<pre><code>&lt;transmission name=\"trans_diff_drive\"&gt;\n  &lt;type&gt;transmission_interface/DifferentialTransmission&lt;/type&gt;\n  &lt;joint name=\"virtual_steer\"&gt;\n    &lt;hardwareInterface&gt;VelocityJointInterface&lt;/hardwareInterface&gt;\n  &lt;/joint&gt;\n  &lt;!-- motor izquierdo --&gt;\n  &lt;actuator name=\"left_wheel_motor\"&gt;\n    &lt;hardwareInterface&gt;VelocityJointInterface&lt;/hardwareInterface&gt;\n    &lt;mechanicalReduction&gt;1.0&lt;/mechanicalReduction&gt;\n  &lt;/actuator&gt;\n  &lt;!-- motor derecho --&gt;\n  &lt;actuator name=\"right_wheel_motor\"&gt;\n    &lt;hardwareInterface&gt;VelocityJointInterface&lt;/hardwareInterface&gt;\n    &lt;mechanicalReduction&gt;1.0&lt;/mechanicalReduction&gt;\n  &lt;/actuator&gt;\n&lt;/transmission&gt;\n</code></pre>"},{"location":"clases/robotica-articulada/tema3/#transmision-diferencial-4-llantas","title":"Transmision Diferencial 4 llantas","text":"<p>Cuatro motores en dos diferenciales <pre><code>&lt;transmission name=\"trans_4wd_diff\"&gt;\n  &lt;type&gt;transmission_interface/FourWheelDifferentialTransmission&lt;/type&gt;\n  &lt;joint name=\"virtual_steer_front\"&gt;\n    &lt;hardwareInterface&gt;VelocityJointInterface&lt;/hardwareInterface&gt;\n  &lt;/joint&gt;\n  &lt;joint name=\"virtual_steer_rear\"&gt;\n    &lt;hardwareInterface&gt;VelocityJointInterface&lt;/hardwareInterface&gt;\n  &lt;/joint&gt;\n  &lt;actuator name=\"front_left_motor\"&gt;\n    &lt;hardwareInterface&gt;VelocityJointInterface&lt;/hardwareInterface&gt;\n    &lt;mechanicalReduction&gt;1.0&lt;/mechanicalReduction&gt;\n  &lt;/actuator&gt;\n  &lt;actuator name=\"front_right_motor\"&gt;\n    &lt;hardwareInterface&gt;VelocityJointInterface&lt;/hardwareInterface&gt;\n    &lt;mechanicalReduction&gt;1.0&lt;/mechanicalReduction&gt;\n  &lt;/actuator&gt;\n  &lt;actuator name=\"rear_left_motor\"&gt;\n    &lt;hardwareInterface&gt;VelocityJointInterface&lt;/hardwareInterface&gt;\n    &lt;mechanicalReduction&gt;1.0&lt;/mechanicalReduction&gt;\n  &lt;/actuator&gt;\n  &lt;actuator name=\"rear_right_motor\"&gt;\n    &lt;hardwareInterface&gt;VelocityJointInterface&lt;/hardwareInterface&gt;\n    &lt;mechanicalReduction&gt;1.0&lt;/mechanicalReduction&gt;\n  &lt;/actuator&gt;\n&lt;/transmission&gt;\n</code></pre></p>"},{"location":"clases/robotica-articulada/tema3/#actuador-no-ligado","title":"Actuador no ligado","text":"<p>Cuando modelas s\u00f3lo el actuador sin una junta URDF asociada <pre><code>&lt;transmission name=\"trans_actuator_only\"&gt;\n  &lt;type&gt;transmission_interface/ActuatorTransmission&lt;/type&gt;\n  &lt;actuator name=\"solo_actuador\"&gt;\n    &lt;hardwareInterface&gt;EffortJointInterface&lt;/hardwareInterface&gt;\n    &lt;mechanicalReduction&gt;1.0&lt;/mechanicalReduction&gt;\n  &lt;/actuator&gt;\n&lt;/transmission&gt;\n</code></pre></p>"},{"location":"clases/robotica-movil/tema1/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"clases/robotica-movil/tema1/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"clases/robotica-movil/tema1/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"clases/robotica-movil/tema1/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"clases/robotica-movil/tema1/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"clases/robotica-movil/tema1/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"clases/robotica-movil/tema1/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"clases/robotica-movil/tema1/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"clases/robotica-movil/tema1/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Primero configuramremos el entorno, a\u00f1ade al archivo de inicio (~/.bashrc) la carga autom\u00e1tica de los comandos de ROS cada vez que abres la terminal.</p> <pre><code>echo \"source /opt/ros/jazzy/setup.bash\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>ros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>ros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"clases/robotica-movil/tema2/","title":"Crear paqueteria ROS","text":"<p>En ROS (Robot Operating System), la paqueter\u00eda es el conjunto de convenciones y herramientas que te permiten organizar, construir y distribuir tu software rob\u00f3tico en unidades llamadas paquetes.</p> <p>Los paquetes son la unidad m\u00ednima de c\u00f3digo que agrupa todo lo necesario para una funci\u00f3n concreta:</p> <ul> <li> <p>Nodos (programas ejecutables)</p> </li> <li> <p>Librer\u00edas compartidas</p> </li> <li> <p>Definiciones de mensajes (.msg) y servicios (.srv)</p> </li> <li> <p>Archivos de configuraci\u00f3n (por ejemplo, par\u00e1metros YAML, launch files)</p> </li> <li> <p>Recursos varios (im\u00e1genes, datos, scripts, etc.)</p> </li> </ul> <p>Cada paquete tiene su propia carpeta, con los siguientes dos archivos minimos:</p> <ul> <li> <p>package.xml, que declara metadatos (nombre, versi\u00f3n, mantenedor, dependencias\u2026)</p> </li> <li> <p>CMakeLists.txt, que indica c\u00f3mo compilarlo (o instala sus componentes) usando CMake/Catkin (ROS 1) o ament (ROS 2).</p> </li> </ul> <p>Las herramientas basicas para trabajar los paquetes son:</p> <ul> <li><code>colcon build</code> Detecta paquetes (CMake, Python, etc.) en src/ y compila en orden de dependencias.</li> <li><code>--symlink-install</code> para enlace simb\u00f3lico de paquetes Python</li> <li><code>--packages-select</code> paquete para compilar s\u00f3lo uno o varios paquetes concretos</li> <li><code>rosdep install</code> Instala en el SO todas las dependencias listadas en los package.xml de tu workspace.</li> <li><code>ros2 run &lt;paquete&gt; &lt;nombre_de_nodo&gt;</code> Ejecuta un nodo</li> <li><code>ros2 launch &lt;paquete&gt; &lt;archivo.launch.py&gt;</code> Lanza Nodos</li> </ul>"},{"location":"clases/robotica-movil/tema2/#1-clonar-repositorio","title":"1. Clonar repositorio","text":"<p>La implementacion final de un robot se debe montar en un sistema de computo portatil, como lo puede ser una raspberry Pi, jetson Nano, etc. Por lo que vamos a desarrollar todo en un repositorio.</p> <p>Vamos a ocupar una paqueteria base para no escribirla de cero. Para esto debemos tener una cuenta en github, y entrar al siguiente repositorio</p> <p></p> <p>Dentro del repositorio seleccionaremos el boton verde de usar la plantilla y crear nuevo repositorio. El nuevo repositorio debera tener el nombre de su paquete, la convencion es usar letras minusculas, sin numeros, sin espacios. Aunque puede usarse el mismo nombre del repositorio base.</p> <p> </p> <p> </p> <p>Si no es el mismo nombre En el repositorio utilizando la tecla . entraremos al editor de github, posteriormente utilizando Ctrl+Shift+F entraremos al buscador. </p> <p>Debemos reemplazar el nombre original con el nombre de tu repositorio. Se encuentra en 4 archivos mostrados en la imagen lateral.</p> <p>Una vez realizado esto vamos a clonar el repositorio.</p> <p> </p> <p>Dentro de la terminal de nuestro Ubuntu crearemos la carpeta de nuestro proyecto</p> <p><pre><code>mkdir dev_ws\ncd dev_ws/\nmkdir src\ncd src/\n</code></pre> dentro de nuestra carpeta src clonaremos nuestro repositorio.</p> <p><pre><code>git clone &lt;repo_URL&gt;\n</code></pre> regresaremos a nuestra carpeta dev_ws utilizando <code>cd ..</code> y compilaremos nuestro paquete.</p> <p>hay que instalar colcon <pre><code>sudo apt update\nsudo apt install python3-colcon-common-extensions\n</code></pre> luego compilamos <pre><code>colcon build --symlink-install\n</code></pre></p> <p>De esta manera hemos construido nuestro primer paquete.</p>"},{"location":"clases/robotica-movil/tema3/","title":"Cmds Comunes ROS","text":"<p>common cmds:</p> <pre><code>ros2 launch robot_mov rsp.launch.py\n</code></pre> <pre><code>rviz2\n</code></pre> <pre><code>source install/setup.bash\n</code></pre> <pre><code>colcon build --symlink-install\n</code></pre> <pre><code>ros2 launch my_bot rsp.launch.py use_sim_time:=true\n</code></pre> <p><pre><code>ros2 run joint_state_publisher_gui joint_state_publisher_gui\n</code></pre> <pre><code>ros2 launch ros_gz_sim gz_sim.launch.py\n</code></pre> spawn bot <pre><code>ros2 run ros_gz_sim create -name robot_name -topic robot_description -entity bot_name\n</code></pre></p>"},{"location":"clases/sistemas-embebidos-i/tema1/","title":"Tema 1","text":""},{"location":"clases/sistemas-embebidos-i/tema1/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>[Enlace a la p </li> </ul>"},{"location":"clases/sistemas-embebidos-i/tema1/#titulo-de-la-asignatura","title":"{{T\u00edtulo de la Asignatura}}","text":"<p>Prerrequisitos: Listar aqu\u00ed las materias, conocimientos o herramientas necesarias.</p> <p>Duraci\u00f3n: X semanas / Y horas.</p>"},{"location":"clases/sistemas-embebidos-i/tema1/#descripcion","title":"Descripci\u00f3n","text":"<p>Breve resumen de la asignatura, su enfoque y aplicaci\u00f3n pr\u00e1ctica.</p>"},{"location":"clases/sistemas-embebidos-i/tema1/#objetivos-de-aprendizaje","title":"Objetivos de Aprendizaje","text":"<ul> <li>Objetivo 1.</li> <li>Objetivo 2.</li> <li>Objetivo 3.</li> </ul>"},{"location":"clases/sistemas-embebidos-i/tema1/#contenido","title":"Contenido","text":"<ol> <li>Tema 1: Breve descripci\u00f3n de contenido.</li> <li>Tema 2: Breve descripci\u00f3n de contenido.</li> <li>Tema 3: Breve descripci\u00f3n de contenido.</li> </ol> <p>[!tip] Puedes adaptar esta lista conforme avances con los estudiantes.</p>"},{"location":"clases/sistemas-embebidos-i/tema1/#videos-tutoriales","title":"Videos Tutoriales","text":""},{"location":"clases/sistemas-embebidos-i/tema1/#video-1-introduccion-al-curso","title":"Video 1: Introducci\u00f3n al curso","text":""},{"location":"clases/sistemas-embebidos-i/tema1/#video-2-demo-practica-de-tema-x","title":"Video 2: Demo pr\u00e1ctica de [Tema X]","text":""},{"location":"clases/sistemas-embebidos-i/tema1/#ejemplos-de-codigo","title":"Ejemplos de C\u00f3digo","text":"<pre><code># Ejemplo en Python\nprint(\"\u00a1Hola, mundo de {{T\u00edtulo de la Asignatura}}!\")\n</code></pre> <pre><code>// Ejemplo en C++\n#include &lt;iostream&gt;\nint main() {\n    std::cout &lt;&lt; \"Ejemplo base\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>[!warning] Recuerda cambiar las rutas de importaci\u00f3n o librer\u00edas seg\u00fan tu entorno.</p>"},{"location":"clases/sistemas-embebidos-i/tema1/#imagenes-y-diagramas","title":"Im\u00e1genes y Diagramas","text":""},{"location":"clases/sistemas-embebidos-i/tema1/#notas-y-observaciones","title":"Notas y Observaciones","text":"<ul> <li>Anotar aqu\u00ed cualquier detalle importante o tarea.</li> <li>Fecha de \u00faltima actualizaci\u00f3n: <code>YYYY-MM-DD</code>.</li> </ul>"},{"location":"clases/sistemas-embebidos-i/tema2/","title":"Tema 2","text":""},{"location":"clases/sistemas-embebidos-i/tema2/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>[Enlace a la p </li> </ul>"},{"location":"clases/sistemas-embebidos-i/tema2/#titulo-de-la-asignatura","title":"{{T\u00edtulo de la Asignatura}}","text":"<p>Prerrequisitos: Listar aqu\u00ed las materias, conocimientos o herramientas necesarias.</p> <p>Duraci\u00f3n: X semanas / Y horas.</p>"},{"location":"clases/sistemas-embebidos-i/tema2/#descripcion","title":"Descripci\u00f3n","text":"<p>Breve resumen de la asignatura, su enfoque y aplicaci\u00f3n pr\u00e1ctica.</p>"},{"location":"clases/sistemas-embebidos-i/tema2/#objetivos-de-aprendizaje","title":"Objetivos de Aprendizaje","text":"<ul> <li>Objetivo 1.</li> <li>Objetivo 2.</li> <li>Objetivo 3.</li> </ul>"},{"location":"clases/sistemas-embebidos-i/tema2/#contenido","title":"Contenido","text":"<ol> <li>Tema 1: Breve descripci\u00f3n de contenido.</li> <li>Tema 2: Breve descripci\u00f3n de contenido.</li> <li>Tema 3: Breve descripci\u00f3n de contenido.</li> </ol> <p>[!tip] Puedes adaptar esta lista conforme avances con los estudiantes.</p>"},{"location":"clases/sistemas-embebidos-i/tema2/#videos-tutoriales","title":"Videos Tutoriales","text":""},{"location":"clases/sistemas-embebidos-i/tema2/#video-1-introduccion-al-curso","title":"Video 1: Introducci\u00f3n al curso","text":""},{"location":"clases/sistemas-embebidos-i/tema2/#video-2-demo-practica-de-tema-x","title":"Video 2: Demo pr\u00e1ctica de [Tema X]","text":""},{"location":"clases/sistemas-embebidos-i/tema2/#ejemplos-de-codigo","title":"Ejemplos de C\u00f3digo","text":"<pre><code># Ejemplo en Python\nprint(\"\u00a1Hola, mundo de {{T\u00edtulo de la Asignatura}}!\")\n</code></pre> <pre><code>// Ejemplo en C++\n#include &lt;iostream&gt;\nint main() {\n    std::cout &lt;&lt; \"Ejemplo base\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>[!warning] Recuerda cambiar las rutas de importaci\u00f3n o librer\u00edas seg\u00fan tu entorno.</p>"},{"location":"clases/sistemas-embebidos-i/tema2/#imagenes-y-diagramas","title":"Im\u00e1genes y Diagramas","text":""},{"location":"clases/sistemas-embebidos-i/tema2/#notas-y-observaciones","title":"Notas y Observaciones","text":"<ul> <li>Anotar aqu\u00ed cualquier detalle importante o tarea.</li> <li>Fecha de \u00faltima actualizaci\u00f3n: <code>YYYY-MM-DD</code>.</li> </ul>"},{"location":"clases/sistemas-embebidos-ii/tema1/","title":"Tema 1","text":""},{"location":"clases/sistemas-embebidos-ii/tema1/#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>[Enlace a la p </li> </ul>"},{"location":"clases/sistemas-embebidos-ii/tema1/#titulo-de-la-asignatura","title":"{{T\u00edtulo de la Asignatura}}","text":"<p>Prerrequisitos: Listar aqu\u00ed las materias, conocimientos o herramientas necesarias.</p> <p>Duraci\u00f3n: X semanas / Y horas.</p>"},{"location":"clases/sistemas-embebidos-ii/tema1/#descripcion","title":"Descripci\u00f3n","text":"<p>Breve resumen de la asignatura, su enfoque y aplicaci\u00f3n pr\u00e1ctica.</p>"},{"location":"clases/sistemas-embebidos-ii/tema1/#objetivos-de-aprendizaje","title":"Objetivos de Aprendizaje","text":"<ul> <li>Objetivo 1.</li> <li>Objetivo 2.</li> <li>Objetivo 3.</li> </ul>"},{"location":"clases/sistemas-embebidos-ii/tema1/#contenido","title":"Contenido","text":"<ol> <li>Tema 1: Breve descripci\u00f3n de contenido.</li> <li>Tema 2: Breve descripci\u00f3n de contenido.</li> <li>Tema 3: Breve descripci\u00f3n de contenido.</li> </ol> <p>[!tip] Puedes adaptar esta lista conforme avances con los estudiantes.</p>"},{"location":"clases/sistemas-embebidos-ii/tema1/#videos-tutoriales","title":"Videos Tutoriales","text":""},{"location":"clases/sistemas-embebidos-ii/tema1/#video-1-introduccion-al-curso","title":"Video 1: Introducci\u00f3n al curso","text":""},{"location":"clases/sistemas-embebidos-ii/tema1/#video-2-demo-practica-de-tema-x","title":"Video 2: Demo pr\u00e1ctica de [Tema X]","text":""},{"location":"clases/sistemas-embebidos-ii/tema1/#ejemplos-de-codigo","title":"Ejemplos de C\u00f3digo","text":"<pre><code># Ejemplo en Python\nprint(\"\u00a1Hola, mundo de {{T\u00edtulo de la Asignatura}}!\")\n</code></pre> <pre><code>// Ejemplo en C++\n#include &lt;iostream&gt;\nint main() {\n    std::cout &lt;&lt; \"Ejemplo base\" &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>[!warning] Recuerda cambiar las rutas de importaci\u00f3n o librer\u00edas seg\u00fan tu entorno.</p>"},{"location":"clases/sistemas-embebidos-ii/tema1/#imagenes-y-diagramas","title":"Im\u00e1genes y Diagramas","text":""},{"location":"clases/sistemas-embebidos-ii/tema1/#notas-y-observaciones","title":"Notas y Observaciones","text":"<ul> <li>Anotar aqu\u00ed cualquier detalle importante o tarea.</li> <li>Fecha de \u00faltima actualizaci\u00f3n: <code>YYYY-MM-DD</code>.</li> </ul>"},{"location":"clases/temas-selectos-im/tema1/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"clases/temas-selectos-im/tema1/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"clases/temas-selectos-im/tema1/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"clases/temas-selectos-im/tema1/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"clases/temas-selectos-im/tema1/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"clases/temas-selectos-im/tema1/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"clases/temas-selectos-im/tema1/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"clases/temas-selectos-im/tema1/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"clases/temas-selectos-im/tema1/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"proyectos/amr/contacto/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"proyectos/amr/contacto/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"proyectos/amr/contacto/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"proyectos/amr/contacto/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"proyectos/amr/contacto/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"proyectos/amr/contacto/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"proyectos/amr/contacto/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"proyectos/amr/contacto/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"proyectos/amr/contacto/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"proyectos/amr/diseno/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"proyectos/amr/diseno/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"proyectos/amr/diseno/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"proyectos/amr/diseno/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"proyectos/amr/diseno/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"proyectos/amr/diseno/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"proyectos/amr/diseno/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"proyectos/amr/diseno/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"proyectos/amr/diseno/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"proyectos/amr/programacion/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"proyectos/amr/programacion/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"proyectos/amr/programacion/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"proyectos/amr/programacion/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"proyectos/amr/programacion/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"proyectos/amr/programacion/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"proyectos/amr/programacion/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"proyectos/amr/programacion/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"proyectos/amr/programacion/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"proyectos/scada/contacto/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"proyectos/scada/contacto/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"proyectos/scada/contacto/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"proyectos/scada/contacto/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"proyectos/scada/contacto/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"proyectos/scada/contacto/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"proyectos/scada/contacto/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"proyectos/scada/contacto/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"proyectos/scada/contacto/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"proyectos/scada/diseno/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"proyectos/scada/diseno/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"proyectos/scada/diseno/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"proyectos/scada/diseno/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"proyectos/scada/diseno/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"proyectos/scada/diseno/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"proyectos/scada/diseno/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"proyectos/scada/diseno/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"proyectos/scada/diseno/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"},{"location":"proyectos/scada/programacion/","title":"Instalaci\u00f3n de ROS 2 Jazzy Jalisco (WSL2 + WSLg)","text":""},{"location":"proyectos/scada/programacion/#que-es-ros","title":"\u00bfQu\u00e9 es ROS?","text":"<p>Aunque se llame \u201csistema operativo\u201d, en realidad es un conjunto de herramientas y librer\u00edas que te ayudan a conectar y coordinar los distintos bloques de tu robot.</p> <p>Define c\u00f3mo intercambian informaci\u00f3n las partes (por ejemplo, tu m\u00f3dulo de visi\u00f3n env\u00eda \u201cveo un obst\u00e1culo\u201d y tu m\u00f3dulo de movimiento recibe ese mensaje y frena).</p> <p>Cuenta con cientos de paquetes que ya resuelven tareas comunes (planificar rutas, procesar im\u00e1genes, simular en ordenador\u2026), de modo que no tienes que escribir todo desde cero.</p> <p>Al dia de actualizacion de esta pagina 21 de mayo de 2025 Jazzy Jalisco es la distribucion mas moderna estable sacada en mayo 23, 2024 con soporte hasta Mayo 2029. Revisar la documentacion de ROS Para mas informacion.</p> <p>ROS es nativo a Linux, el cual deberia ser usado en proceso de alto rendimiento. Sin embargo para experimentacion o si no se quiere sacar una particion de Linux WSL2 es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p>"},{"location":"proyectos/scada/programacion/#1-instalar-wsl2-y-ubuntu-2404","title":"1. Instalar WSL2 y Ubuntu 24.04","text":"<ul> <li>Si ya est\u00e1s en Ubuntu nativo:  Omite este Paso 1 completo (instalaci\u00f3n de WSL2 y Ubuntu)</li> <li>Si est\u00e1s en Windows 11:  Sigue todos los pasos. </li> </ul> <p>WSL2 (Windows Subsystem for Linux 2) es una mejora del Subsistema de Windows para Linux (WSL), que permite ejecutar distribuciones Linux nativas en Windows sin necesidad de m\u00e1quinas virtuales tradicionales.</p> <p>Abre powershell como administrador  <pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> Este comando:</p> <ul> <li>Habilita el Subsistema de Windows para Linux (WSL) y la plataforma de maquina virtual</li> <li>Configura WSL2 comola version default</li> <li>Descarga e instala Ubuntu 24.04 LTS (Noble Numbat es el distro estable actual)</li> </ul>"},{"location":"proyectos/scada/programacion/#2-primer-arranque-y-actualizacion-del-sistema","title":"2.  Primer arranque y actualizaci\u00f3n del sistema","text":"<p>Si estas en windows inicia Ubuntu (Desdes inicio) y crea un usuario/contrasena de UNIX(La contrasena no mostrara caracteres cuando escribes), posteriormente en el shell corre los siguientes comandos:</p> <p><pre><code>sudo apt update\nsudo apt full-upgrade -y\n</code></pre> Esto actualizara to Ubuntu</p>"},{"location":"proyectos/scada/programacion/#3-configuracion-del-sistema-para-ros-2","title":"3. Configuraci\u00f3n del sistema para ROS 2","text":"<p>Antes de instalar ROS, debemos configurar nuestro sistema para hacerlo compatible.</p>"},{"location":"proyectos/scada/programacion/#31-configurar-el-locale-codificacion-de-texto","title":"3.1 Configurar el locale (codificaci\u00f3n de texto)","text":"<p>Primero debemos configurar el locale que se refiere a los ajutes de un sistema para un idioma, ROS utiliza UTF-8.  Evitando problemas con caracteres especiales en ROS y otros programas.</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n</code></pre> Estos settings utilizan ingles estados unidos, sin embargo cualquier esta bien UTF-8 sirve.</p> <pre><code>locale # Verificamos que sea UTF-8\n</code></pre>"},{"location":"proyectos/scada/programacion/#32-habilitar-universe-y-anadir-el-repositorio-de-ros-2","title":"3.2 Habilitar \u201cuniverse\u201d y a\u00f1adir el repositorio de ROS 2","text":"<p>Primero debemos asegurar que el repositorio de Ubuntu Universe este habilitado. </p> <pre><code>sudo apt install -y software-properties-common\nsudo add-apt-repository universe\n</code></pre> <p>Ahora agreguemos la clave GPG ROS 2 con apt.</p> <pre><code>sudo apt update\nsudo apt install -y curl\ncurl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \\\n  | sudo tee /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre> <p>Finalmente agregemos el repositorio a tu lista de sources para instalar.</p> <pre><code>echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \\\n  http://packages.ros.org/ros2/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" \\\n  | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n</code></pre>"},{"location":"proyectos/scada/programacion/#4-instalar-ros-2-jazzy-desktop","title":"4. Instalar ROS 2 Jazzy Desktop","text":"<p>Primero actualiza tu repositorio de apt para tomar en cuenta los cambios que hicimos. <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre></p> <p>Realizamos la instalacion completa</p> <pre><code>sudo apt install ros-jazzy-desktop\n</code></pre>"},{"location":"proyectos/scada/programacion/#5-verifica-instalacion-con-un-ejemplo","title":"5. Verifica instalacion con un ejemplo","text":"<p>Para esta prueba necesitaras dos terminales porque lo que abre una segunda terminal.</p> <p>En una terminal vamos a correr un codigo sencillo en C++ llamado talker:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_cpp talker\n</code></pre> <p>En otra terminal vamos correr un codigo en python llamado Listener:</p> <pre><code>source /opt/ros/jazzy/setup.bash\nros2 run demo_nodes_py listener\n</code></pre> <p>Deberias ver que talker imprime en consola, Publishing: numbers y en la consola on listener se imprime I heard: numbers coincidiendo el mensaje. Verificando que los APIs de C++ y python funcionan.</p> <p>Felicidades has isntalado ROS.</p>"}]}